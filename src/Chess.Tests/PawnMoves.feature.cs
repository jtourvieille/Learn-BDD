// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Chess.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PawnMovesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "PawnMoves.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Pawn Moves", "<table margin=\'5\'>\r\n\t<tr>\r\n\t\t<td>\r\n\t\t\t<img src =\'./Board.png\' alt=\'Board\' width=\'" +
                    "200\' height=\'200\' />\r\n\t\t</td>\r\n\t\t<td>\r\n\t\tIn order follow the chess game rules<br" +
                    "/>\r\n\t\tAs a <b>Pawn</b><br/>\r\n\t\tI have to respect some move rules\r\n\t\t</td>\r\n\t</tr" +
                    ">\r\n</table>", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Pawn Moves")))
            {
                global::Chess.Tests.PawnMovesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AWhitePawnCanMoveOneStepForward(string initialPosition, string validPositions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pawn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A white pawn can move one step forward", @__tags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given(string.Format("A pawn is placed at the initial position {0}", initialPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.And("The piece color is White", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.When("I ask for pawn valid moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then(string.Format("Moves to the positions {0} are valid", validPositions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn can move one step forward: 44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "44")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "45")]
        public virtual void AWhitePawnCanMoveOneStepForward_44()
        {
#line 16
this.AWhitePawnCanMoveOneStepForward("44", "45", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn can move one step forward: 43")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "43")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "43")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "44")]
        public virtual void AWhitePawnCanMoveOneStepForward_43()
        {
#line 16
this.AWhitePawnCanMoveOneStepForward("43", "44", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn can move one step forward: 86")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "86")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "86")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "87")]
        public virtual void AWhitePawnCanMoveOneStepForward_86()
        {
#line 16
this.AWhitePawnCanMoveOneStepForward("86", "87", ((string[])(null)));
#line hidden
        }
        
        public virtual void ABlackPawnCanMoveOneStepForward(string initialPosition, string validPositions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pawn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A black pawn can move one step forward", @__tags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given(string.Format("A pawn is placed at the initial position {0}", initialPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.And("The piece color is Black", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("I ask for pawn valid moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then(string.Format("Moves to the positions {0} are valid", validPositions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A black pawn can move one step forward: 34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "34")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "33")]
        public virtual void ABlackPawnCanMoveOneStepForward_34()
        {
#line 30
this.ABlackPawnCanMoveOneStepForward("34", "33", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A black pawn can move one step forward: 17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "17")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "16")]
        public virtual void ABlackPawnCanMoveOneStepForward_17()
        {
#line 30
this.ABlackPawnCanMoveOneStepForward("17", "16", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A black pawn can move one step forward: 74")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "74")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "74")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "73")]
        public virtual void ABlackPawnCanMoveOneStepForward_74()
        {
#line 30
this.ABlackPawnCanMoveOneStepForward("74", "73", ((string[])(null)));
#line hidden
        }
        
        public virtual void AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward(string initialPosition, string validPositions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pawn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A white pawn placed on his initial rank can move one or two step forward", @__tags);
#line 43
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given(string.Format("A pawn is placed at the initial position {0}", initialPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.And("The piece color is White", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.When("I ask for pawn valid moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then(string.Format("Moves to the positions {0} are valid", validPositions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn placed on his initial rank can move one or two step forward: 22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "23,24")]
        public virtual void AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward_22()
        {
#line 43
this.AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward("22", "23,24", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn placed on his initial rank can move one or two step forward: 52")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "52")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "52")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "53,54")]
        public virtual void AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward_52()
        {
#line 43
this.AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward("52", "53,54", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn placed on his initial rank can move one or two step forward: 82")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "82")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "82")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "83,84")]
        public virtual void AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward_82()
        {
#line 43
this.AWhitePawnPlacedOnHisInitialRankCanMoveOneOrTwoStepForward("82", "83,84", ((string[])(null)));
#line hidden
        }
        
        public virtual void AWhitePawnPlacedOnTheBlackInitialRankCantMoveOneOrTwoStepForward(string initialPosition, string invalidPositions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pawn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A white pawn placed on the black initial rank can\'t move one or two step forward", @__tags);
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given(string.Format("A pawn is placed at the initial position {0}", initialPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.And("The piece color is White", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.When("I ask for pawn valid moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then(string.Format("Moves to the positions {0} are invalid", invalidPositions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn placed on the black initial rank can\'t move one or two step forward:" +
            " 27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "27")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InvalidPositions", "25,26,29")]
        public virtual void AWhitePawnPlacedOnTheBlackInitialRankCantMoveOneOrTwoStepForward_27()
        {
#line 57
this.AWhitePawnPlacedOnTheBlackInitialRankCantMoveOneOrTwoStepForward("27", "25,26,29", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A white pawn placed on the black initial rank can\'t move one or two step forward:" +
            " 67")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "67")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "67")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InvalidPositions", "65,66,69")]
        public virtual void AWhitePawnPlacedOnTheBlackInitialRankCantMoveOneOrTwoStepForward_67()
        {
#line 57
this.AWhitePawnPlacedOnTheBlackInitialRankCantMoveOneOrTwoStepForward("67", "65,66,69", ((string[])(null)));
#line hidden
        }
        
        public virtual void APawnCantMoveBackward(string initialPosition, string invalidPositions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pawn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A pawn can\'t move backward", @__tags);
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given(string.Format("A pawn is placed at the initial position {0}", initialPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("The piece color is White", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I ask for pawn valid moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then(string.Format("Moves to the positions {0} are invalid", invalidPositions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A pawn can\'t move backward: 55")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "55")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "55")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InvalidPositions", "54,53,52,51")]
        public virtual void APawnCantMoveBackward_55()
        {
#line 69
this.APawnCantMoveBackward("55", "54,53,52,51", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("A pawn can\'t move backward: 22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "22")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InvalidPositions", "21")]
        public virtual void APawnCantMoveBackward_22()
        {
#line 69
this.APawnCantMoveBackward("22", "21", ((string[])(null)));
#line hidden
        }
        
        public virtual void PawnCanNotGoOutsideBoardBoundsWhenItIsCloseToTheBorder(string initialPosition, string validPositions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Pawn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn can not go outside board bounds when it is close to the border", @__tags);
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given(string.Format("A pawn is placed at the initial position {0}", initialPosition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
 testRunner.And("The piece color is White", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("I ask for pawn valid moves", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then(string.Format("Moves to the positions {0} are valid", validPositions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pawn can not go outside board bounds when it is close to the border: 28")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "28")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "28")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "")]
        public virtual void PawnCanNotGoOutsideBoardBoundsWhenItIsCloseToTheBorder_28()
        {
#line 81
this.PawnCanNotGoOutsideBoardBoundsWhenItIsCloseToTheBorder("28", "", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Pawn can not go outside board bounds when it is close to the border: 38")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Pawn Moves")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Pawn")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "38")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:InitialPosition", "38")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ValidPositions", "")]
        public virtual void PawnCanNotGoOutsideBoardBoundsWhenItIsCloseToTheBorder_38()
        {
#line 81
this.PawnCanNotGoOutsideBoardBoundsWhenItIsCloseToTheBorder("38", "", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
